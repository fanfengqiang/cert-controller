/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/fanfengqiang/cert-controller/pkg/apis/certcontroller/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertLister helps list Certs.
type CertLister interface {
	// List lists all Certs in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.Cert, err error)
	// Certs returns an object that can list and get Certs.
	Certs(namespace string) CertNamespaceLister
	CertListerExpansion
}

// certLister implements the CertLister interface.
type certLister struct {
	indexer cache.Indexer
}

// NewCertLister returns a new CertLister.
func NewCertLister(indexer cache.Indexer) CertLister {
	return &certLister{indexer: indexer}
}

// List lists all Certs in the indexer.
func (s *certLister) List(selector labels.Selector) (ret []*v1beta1.Cert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Cert))
	})
	return ret, err
}

// Certs returns an object that can list and get Certs.
func (s *certLister) Certs(namespace string) CertNamespaceLister {
	return certNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertNamespaceLister helps list and get Certs.
type CertNamespaceLister interface {
	// List lists all Certs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.Cert, err error)
	// Get retrieves the Cert from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.Cert, error)
	CertNamespaceListerExpansion
}

// certNamespaceLister implements the CertNamespaceLister
// interface.
type certNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Certs in the indexer for a given namespace.
func (s certNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Cert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Cert))
	})
	return ret, err
}

// Get retrieves the Cert from the indexer for a given namespace and name.
func (s certNamespaceLister) Get(name string) (*v1beta1.Cert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("cert"), name)
	}
	return obj.(*v1beta1.Cert), nil
}
